// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// AccessToken defines model for AccessToken.
type AccessToken struct {
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	InsertedAt  *time.Time `json:"inserted_at,omitempty"`
	Scopes      *string    `json:"scopes,omitempty"`
	Token       *string    `json:"token,omitempty"`
}

// BackendApiSchema defines model for BackendApiSchema.
type BackendApiSchema struct {
	Config        *map[string]interface{} `json:"config,omitempty"`
	DefaultIngest *bool                   `json:"default_ingest?,omitempty"`
	Id            *int                    `json:"id,omitempty"`
	InsertedAt    *time.Time              `json:"inserted_at,omitempty"`
	Metadata      *map[string]interface{} `json:"metadata,omitempty"`
	Name          string                  `json:"name"`
	Token         *string                 `json:"token,omitempty"`
	UpdatedAt     *time.Time              `json:"updated_at,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = interface{}

// EndpointApiSchema defines model for EndpointApiSchema.
type EndpointApiSchema struct {
	CacheDurationSeconds       *int                    `json:"cache_duration_seconds,omitempty"`
	Description                *string                 `json:"description"`
	EnableAuth                 *bool                   `json:"enable_auth,omitempty"`
	Id                         *int                    `json:"id,omitempty"`
	MaxLimit                   *int                    `json:"max_limit,omitempty"`
	Name                       string                  `json:"name"`
	ProactiveRequeryingSeconds *int                    `json:"proactive_requerying_seconds,omitempty"`
	Query                      string                  `json:"query"`
	Sandboxable                *bool                   `json:"sandboxable"`
	SourceMapping              *map[string]interface{} `json:"source_mapping"`
	Token                      *string                 `json:"token,omitempty"`
}

// EndpointQuery defines model for EndpointQuery.
type EndpointQuery struct {
	Error  *EndpointQuery_Error      `json:"error,omitempty"`
	Result *[]map[string]interface{} `json:"result,omitempty"`
}

// EndpointQueryError0 defines model for .
type EndpointQueryError0 = map[string]interface{}

// EndpointQueryError1 defines model for .
type EndpointQueryError1 = string

// EndpointQuery_Error defines model for EndpointQuery.Error.
type EndpointQuery_Error struct {
	union json.RawMessage
}

// Event defines model for Event.
type Event struct {
	EventMessage *string `json:"event_message,omitempty"`
	Timestamp    *int    `json:"timestamp,omitempty"`
}

// LogsCreated defines model for LogsCreated.
type LogsCreated struct {
	Message *string `json:"message,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	OtherEmailNotifications       *string   `json:"other_email_notifications,omitempty"`
	TeamUserIdsForEmail           *[]string `json:"team_user_ids_for_email,omitempty"`
	TeamUserIdsForSchemaUpdates   *[]string `json:"team_user_ids_for_schema_updates,omitempty"`
	TeamUserIdsForSms             *[]string `json:"team_user_ids_for_sms,omitempty"`
	UserEmailNotifications        *bool     `json:"user_email_notifications,omitempty"`
	UserSchemaUpdateNotifications *bool     `json:"user_schema_update_notifications,omitempty"`
	UserTextNotifications         *bool     `json:"user_text_notifications,omitempty"`
}

// QueryParseResult defines model for QueryParseResult.
type QueryParseResult struct {
	Errors *QueryParseResult_Errors `json:"errors,omitempty"`
	Result map[string]interface{}   `json:"result"`
}

// QueryParseResultErrors0 defines model for .
type QueryParseResultErrors0 = map[string]interface{}

// QueryParseResultErrors1 defines model for .
type QueryParseResultErrors1 = string

// QueryParseResult_Errors defines model for QueryParseResult.Errors.
type QueryParseResult_Errors struct {
	union json.RawMessage
}

// QueryResult defines model for QueryResult.
type QueryResult struct {
	Errors *QueryResult_Errors    `json:"errors,omitempty"`
	Result map[string]interface{} `json:"result"`
}

// QueryResultErrors0 defines model for .
type QueryResultErrors0 = map[string]interface{}

// QueryResultErrors1 defines model for .
type QueryResultErrors1 = string

// QueryResult_Errors defines model for QueryResult.Errors.
type QueryResult_Errors struct {
	union json.RawMessage
}

// RuleApiSchema defines model for RuleApiSchema.
type RuleApiSchema struct {
	BackendId  *int       `json:"backend_id,omitempty"`
	Id         *int       `json:"id,omitempty"`
	InsertedAt *time.Time `json:"inserted_at,omitempty"`
	LqlString  *string    `json:"lql_string,omitempty"`
	SourceId   *int       `json:"source_id,omitempty"`
	Token      *string    `json:"token,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// ServerError defines model for ServerError.
type ServerError = interface{}

// Source defines model for Source.
type Source struct {
	ApiQuota                    *int                    `json:"api_quota,omitempty"`
	BigqueryTableTtl            *int                    `json:"bigquery_table_ttl,omitempty"`
	BqTableId                   *string                 `json:"bq_table_id,omitempty"`
	CustomEventMessageKeys      *string                 `json:"custom_event_message_keys,omitempty"`
	DefaultIngestBackendEnabled *bool                   `json:"default_ingest_backend_enabled?,omitempty"`
	Favorite                    *bool                   `json:"favorite,omitempty"`
	HasRejectedEvents           *bool                   `json:"has_rejected_events,omitempty"`
	Id                          interface{}             `json:"id,omitempty"`
	InsertedAt                  *time.Time              `json:"inserted_at,omitempty"`
	Metrics                     *map[string]interface{} `json:"metrics,omitempty"`
	Name                        string                  `json:"name"`
	Notifications               *[]Notification         `json:"notifications,omitempty"`
	PublicToken                 *string                 `json:"public_token,omitempty"`
	SlackHookUrl                *string                 `json:"slack_hook_url,omitempty"`
	Token                       *string                 `json:"token,omitempty"`
	UpdatedAt                   *time.Time              `json:"updated_at,omitempty"`
	WebhookNotificationUrl      *string                 `json:"webhook_notification_url,omitempty"`
}

// SourceSchema defines model for SourceSchema.
type SourceSchema = map[string]interface{}

// Team defines model for Team.
type Team struct {
	Name      string      `json:"name"`
	TeamUsers *[]TeamUser `json:"team_users,omitempty"`
	Token     *string     `json:"token,omitempty"`
	User      *User       `json:"user,omitempty"`
}

// TeamUser defines model for TeamUser.
type TeamUser struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized = interface{}

// User defines model for User.
type User struct {
	ApiKey                  string  `json:"api_key"`
	ApiQuota                *int    `json:"api_quota,omitempty"`
	BigqueryDatasetId       *string `json:"bigquery_dataset_id"`
	BigqueryDatasetLocation *string `json:"bigquery_dataset_location"`
	BigqueryProjectId       *string `json:"bigquery_project_id"`
	Company                 *string `json:"company"`
	Email                   string  `json:"email"`
	EmailMeProduct          *bool   `json:"email_me_product,omitempty"`
	EmailPreferred          *string `json:"email_preferred,omitempty"`
	Image                   *string `json:"image"`
	Name                    *string `json:"name,omitempty"`
	Phone                   *string `json:"phone"`
	Provider                string  `json:"provider"`
	Token                   string  `json:"token"`
}

// LogflareWebLogControllerCreateParams defines parameters for LogflareWebLogControllerCreate.
type LogflareWebLogControllerCreateParams struct {
	// Source Source UUID
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// SourceName Source name
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
}

// LogflareWebLogControllerCreate2Params defines parameters for LogflareWebLogControllerCreate2.
type LogflareWebLogControllerCreate2Params struct {
	// Source Source UUID
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// SourceName Source name
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
}

// LogflareWebLogControllerCreate3Params defines parameters for LogflareWebLogControllerCreate3.
type LogflareWebLogControllerCreate3Params struct {
	// Source Source UUID
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// SourceName Source name
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
}

// LogflareWebLogControllerCreate4Params defines parameters for LogflareWebLogControllerCreate4.
type LogflareWebLogControllerCreate4Params struct {
	// Source Source UUID
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// SourceName Source name
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
}

// LogflareWebApiQueryControllerQueryParams defines parameters for LogflareWebApiQueryControllerQuery.
type LogflareWebApiQueryControllerQueryParams struct {
	// Sql BigQuery SQL string, alias for bq_sql
	Sql *string `form:"sql,omitempty" json:"sql,omitempty"`

	// BqSql BigQuery SQL string
	BqSql *string `form:"bq_sql,omitempty" json:"bq_sql,omitempty"`

	// ChSql ClickHouse SQL string
	ChSql *string `form:"ch_sql,omitempty" json:"ch_sql,omitempty"`

	// PgSql PostgresSQL string
	PgSql *string `form:"pg_sql,omitempty" json:"pg_sql,omitempty"`
}

// LogflareWebApiQueryControllerParseParams defines parameters for LogflareWebApiQueryControllerParse.
type LogflareWebApiQueryControllerParseParams struct {
	// Sql BigQuery SQL string, alias for bq_sql
	Sql *string `form:"sql,omitempty" json:"sql,omitempty"`

	// BqSql BigQuery SQL string
	BqSql *string `form:"bq_sql,omitempty" json:"bq_sql,omitempty"`

	// ChSql ClickHouse SQL string
	ChSql *string `form:"ch_sql,omitempty" json:"ch_sql,omitempty"`
}

// LogflareWebApiAccessTokenControllerCreateJSONRequestBody defines body for LogflareWebApiAccessTokenControllerCreate for application/json ContentType.
type LogflareWebApiAccessTokenControllerCreateJSONRequestBody = AccessToken

// LogflareWebApiBackendControllerCreateJSONRequestBody defines body for LogflareWebApiBackendControllerCreate for application/json ContentType.
type LogflareWebApiBackendControllerCreateJSONRequestBody = BackendApiSchema

// LogflareWebApiBackendControllerUpdate2JSONRequestBody defines body for LogflareWebApiBackendControllerUpdate2 for application/json ContentType.
type LogflareWebApiBackendControllerUpdate2JSONRequestBody = BackendApiSchema

// LogflareWebApiBackendControllerUpdateJSONRequestBody defines body for LogflareWebApiBackendControllerUpdate for application/json ContentType.
type LogflareWebApiBackendControllerUpdateJSONRequestBody = BackendApiSchema

// LogflareWebApiEndpointControllerCreateJSONRequestBody defines body for LogflareWebApiEndpointControllerCreate for application/json ContentType.
type LogflareWebApiEndpointControllerCreateJSONRequestBody = EndpointApiSchema

// LogflareWebApiEndpointControllerUpdate2JSONRequestBody defines body for LogflareWebApiEndpointControllerUpdate2 for application/json ContentType.
type LogflareWebApiEndpointControllerUpdate2JSONRequestBody = EndpointApiSchema

// LogflareWebApiEndpointControllerUpdateJSONRequestBody defines body for LogflareWebApiEndpointControllerUpdate for application/json ContentType.
type LogflareWebApiEndpointControllerUpdateJSONRequestBody = EndpointApiSchema

// LogflareWebApiRuleControllerCreateJSONRequestBody defines body for LogflareWebApiRuleControllerCreate for application/json ContentType.
type LogflareWebApiRuleControllerCreateJSONRequestBody = RuleApiSchema

// LogflareWebApiRuleControllerUpdate2JSONRequestBody defines body for LogflareWebApiRuleControllerUpdate2 for application/json ContentType.
type LogflareWebApiRuleControllerUpdate2JSONRequestBody = RuleApiSchema

// LogflareWebApiRuleControllerUpdateJSONRequestBody defines body for LogflareWebApiRuleControllerUpdate for application/json ContentType.
type LogflareWebApiRuleControllerUpdateJSONRequestBody = RuleApiSchema

// LogflareWebApiSourceControllerCreateJSONRequestBody defines body for LogflareWebApiSourceControllerCreate for application/json ContentType.
type LogflareWebApiSourceControllerCreateJSONRequestBody = Source

// LogflareWebApiSourceControllerUpdate2JSONRequestBody defines body for LogflareWebApiSourceControllerUpdate2 for application/json ContentType.
type LogflareWebApiSourceControllerUpdate2JSONRequestBody = Source

// LogflareWebApiSourceControllerUpdateJSONRequestBody defines body for LogflareWebApiSourceControllerUpdate for application/json ContentType.
type LogflareWebApiSourceControllerUpdateJSONRequestBody = Source

// LogflareWebApiTeamControllerCreateJSONRequestBody defines body for LogflareWebApiTeamControllerCreate for application/json ContentType.
type LogflareWebApiTeamControllerCreateJSONRequestBody = Team

// LogflareWebApiTeamControllerUpdate2JSONRequestBody defines body for LogflareWebApiTeamControllerUpdate2 for application/json ContentType.
type LogflareWebApiTeamControllerUpdate2JSONRequestBody = Team

// LogflareWebApiTeamControllerUpdateJSONRequestBody defines body for LogflareWebApiTeamControllerUpdate for application/json ContentType.
type LogflareWebApiTeamControllerUpdateJSONRequestBody = Team

// AsEndpointQueryError0 returns the union data inside the EndpointQuery_Error as a EndpointQueryError0
func (t EndpointQuery_Error) AsEndpointQueryError0() (EndpointQueryError0, error) {
	var body EndpointQueryError0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEndpointQueryError0 overwrites any union data inside the EndpointQuery_Error as the provided EndpointQueryError0
func (t *EndpointQuery_Error) FromEndpointQueryError0(v EndpointQueryError0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEndpointQueryError0 performs a merge with any union data inside the EndpointQuery_Error, using the provided EndpointQueryError0
func (t *EndpointQuery_Error) MergeEndpointQueryError0(v EndpointQueryError0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEndpointQueryError1 returns the union data inside the EndpointQuery_Error as a EndpointQueryError1
func (t EndpointQuery_Error) AsEndpointQueryError1() (EndpointQueryError1, error) {
	var body EndpointQueryError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEndpointQueryError1 overwrites any union data inside the EndpointQuery_Error as the provided EndpointQueryError1
func (t *EndpointQuery_Error) FromEndpointQueryError1(v EndpointQueryError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEndpointQueryError1 performs a merge with any union data inside the EndpointQuery_Error, using the provided EndpointQueryError1
func (t *EndpointQuery_Error) MergeEndpointQueryError1(v EndpointQueryError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EndpointQuery_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EndpointQuery_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsQueryParseResultErrors0 returns the union data inside the QueryParseResult_Errors as a QueryParseResultErrors0
func (t QueryParseResult_Errors) AsQueryParseResultErrors0() (QueryParseResultErrors0, error) {
	var body QueryParseResultErrors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQueryParseResultErrors0 overwrites any union data inside the QueryParseResult_Errors as the provided QueryParseResultErrors0
func (t *QueryParseResult_Errors) FromQueryParseResultErrors0(v QueryParseResultErrors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQueryParseResultErrors0 performs a merge with any union data inside the QueryParseResult_Errors, using the provided QueryParseResultErrors0
func (t *QueryParseResult_Errors) MergeQueryParseResultErrors0(v QueryParseResultErrors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsQueryParseResultErrors1 returns the union data inside the QueryParseResult_Errors as a QueryParseResultErrors1
func (t QueryParseResult_Errors) AsQueryParseResultErrors1() (QueryParseResultErrors1, error) {
	var body QueryParseResultErrors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQueryParseResultErrors1 overwrites any union data inside the QueryParseResult_Errors as the provided QueryParseResultErrors1
func (t *QueryParseResult_Errors) FromQueryParseResultErrors1(v QueryParseResultErrors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQueryParseResultErrors1 performs a merge with any union data inside the QueryParseResult_Errors, using the provided QueryParseResultErrors1
func (t *QueryParseResult_Errors) MergeQueryParseResultErrors1(v QueryParseResultErrors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t QueryParseResult_Errors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *QueryParseResult_Errors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsQueryResultErrors0 returns the union data inside the QueryResult_Errors as a QueryResultErrors0
func (t QueryResult_Errors) AsQueryResultErrors0() (QueryResultErrors0, error) {
	var body QueryResultErrors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQueryResultErrors0 overwrites any union data inside the QueryResult_Errors as the provided QueryResultErrors0
func (t *QueryResult_Errors) FromQueryResultErrors0(v QueryResultErrors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQueryResultErrors0 performs a merge with any union data inside the QueryResult_Errors, using the provided QueryResultErrors0
func (t *QueryResult_Errors) MergeQueryResultErrors0(v QueryResultErrors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsQueryResultErrors1 returns the union data inside the QueryResult_Errors as a QueryResultErrors1
func (t QueryResult_Errors) AsQueryResultErrors1() (QueryResultErrors1, error) {
	var body QueryResultErrors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQueryResultErrors1 overwrites any union data inside the QueryResult_Errors as the provided QueryResultErrors1
func (t *QueryResult_Errors) FromQueryResultErrors1(v QueryResultErrors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQueryResultErrors1 performs a merge with any union data inside the QueryResult_Errors, using the provided QueryResultErrors1
func (t *QueryResult_Errors) MergeQueryResultErrors1(v QueryResultErrors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t QueryResult_Errors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *QueryResult_Errors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LogflareWebApiAccessTokenControllerIndex request
	LogflareWebApiAccessTokenControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiAccessTokenControllerCreateWithBody request with any body
	LogflareWebApiAccessTokenControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiAccessTokenControllerCreate(ctx context.Context, body LogflareWebApiAccessTokenControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiAccessTokenControllerDelete request
	LogflareWebApiAccessTokenControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerIndex request
	LogflareWebApiBackendControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerCreateWithBody request with any body
	LogflareWebApiBackendControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiBackendControllerCreate(ctx context.Context, body LogflareWebApiBackendControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerDelete request
	LogflareWebApiBackendControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerShow request
	LogflareWebApiBackendControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerUpdate2WithBody request with any body
	LogflareWebApiBackendControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiBackendControllerUpdate2(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiBackendControllerUpdateWithBody request with any body
	LogflareWebApiBackendControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiBackendControllerUpdate(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerIndex request
	LogflareWebApiEndpointControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerCreateWithBody request with any body
	LogflareWebApiEndpointControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiEndpointControllerCreate(ctx context.Context, body LogflareWebApiEndpointControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebEndpointsControllerQuery request
	LogflareWebEndpointsControllerQuery(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebEndpointsControllerQuery2 request
	LogflareWebEndpointsControllerQuery2(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebEndpointsControllerQuery3 request
	LogflareWebEndpointsControllerQuery3(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerDelete request
	LogflareWebApiEndpointControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerShow request
	LogflareWebApiEndpointControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerUpdate2WithBody request with any body
	LogflareWebApiEndpointControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiEndpointControllerUpdate2(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiEndpointControllerUpdateWithBody request with any body
	LogflareWebApiEndpointControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiEndpointControllerUpdate(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebLogControllerCreate request
	LogflareWebLogControllerCreate(ctx context.Context, params *LogflareWebLogControllerCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebLogControllerCreate2 request
	LogflareWebLogControllerCreate2(ctx context.Context, params *LogflareWebLogControllerCreate2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebLogControllerCreate3 request
	LogflareWebLogControllerCreate3(ctx context.Context, params *LogflareWebLogControllerCreate3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebLogControllerCreate4 request
	LogflareWebLogControllerCreate4(ctx context.Context, params *LogflareWebLogControllerCreate4Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiQueryControllerQuery request
	LogflareWebApiQueryControllerQuery(ctx context.Context, params *LogflareWebApiQueryControllerQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiQueryControllerParse request
	LogflareWebApiQueryControllerParse(ctx context.Context, params *LogflareWebApiQueryControllerParseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerIndex request
	LogflareWebApiRuleControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerCreateWithBody request with any body
	LogflareWebApiRuleControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiRuleControllerCreate(ctx context.Context, body LogflareWebApiRuleControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerDelete request
	LogflareWebApiRuleControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerShow request
	LogflareWebApiRuleControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerUpdate2WithBody request with any body
	LogflareWebApiRuleControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiRuleControllerUpdate2(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiRuleControllerUpdateWithBody request with any body
	LogflareWebApiRuleControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiRuleControllerUpdate(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerIndex request
	LogflareWebApiSourceControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerCreateWithBody request with any body
	LogflareWebApiSourceControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiSourceControllerCreate(ctx context.Context, body LogflareWebApiSourceControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerRemoveBackend request
	LogflareWebApiSourceControllerRemoveBackend(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerAddBackend request
	LogflareWebApiSourceControllerAddBackend(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerRecent request
	LogflareWebApiSourceControllerRecent(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerShowSchema request
	LogflareWebApiSourceControllerShowSchema(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerDelete request
	LogflareWebApiSourceControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerShow request
	LogflareWebApiSourceControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerUpdate2WithBody request with any body
	LogflareWebApiSourceControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiSourceControllerUpdate2(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiSourceControllerUpdateWithBody request with any body
	LogflareWebApiSourceControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiSourceControllerUpdate(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerIndex request
	LogflareWebApiTeamControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerCreateWithBody request with any body
	LogflareWebApiTeamControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiTeamControllerCreate(ctx context.Context, body LogflareWebApiTeamControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerDelete request
	LogflareWebApiTeamControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerShow request
	LogflareWebApiTeamControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerUpdate2WithBody request with any body
	LogflareWebApiTeamControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiTeamControllerUpdate2(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogflareWebApiTeamControllerUpdateWithBody request with any body
	LogflareWebApiTeamControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogflareWebApiTeamControllerUpdate(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LogflareWebApiAccessTokenControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiAccessTokenControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiAccessTokenControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiAccessTokenControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiAccessTokenControllerCreate(ctx context.Context, body LogflareWebApiAccessTokenControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiAccessTokenControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiAccessTokenControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiAccessTokenControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerCreate(ctx context.Context, body LogflareWebApiBackendControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerShowRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerUpdate2RequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerUpdate2(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerUpdate2Request(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerUpdateRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiBackendControllerUpdate(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiBackendControllerUpdateRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerCreate(ctx context.Context, body LogflareWebApiEndpointControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebEndpointsControllerQuery(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebEndpointsControllerQueryRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebEndpointsControllerQuery2(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebEndpointsControllerQuery2Request(c.Server, tokenOrName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebEndpointsControllerQuery3(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebEndpointsControllerQuery3Request(c.Server, tokenOrName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerShowRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerUpdate2RequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerUpdate2(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerUpdate2Request(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerUpdateRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiEndpointControllerUpdate(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiEndpointControllerUpdateRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebLogControllerCreate(ctx context.Context, params *LogflareWebLogControllerCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebLogControllerCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebLogControllerCreate2(ctx context.Context, params *LogflareWebLogControllerCreate2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebLogControllerCreate2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebLogControllerCreate3(ctx context.Context, params *LogflareWebLogControllerCreate3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebLogControllerCreate3Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebLogControllerCreate4(ctx context.Context, params *LogflareWebLogControllerCreate4Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebLogControllerCreate4Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiQueryControllerQuery(ctx context.Context, params *LogflareWebApiQueryControllerQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiQueryControllerQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiQueryControllerParse(ctx context.Context, params *LogflareWebApiQueryControllerParseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiQueryControllerParseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerCreate(ctx context.Context, body LogflareWebApiRuleControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerShowRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerUpdate2RequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerUpdate2(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerUpdate2Request(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerUpdateRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiRuleControllerUpdate(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiRuleControllerUpdateRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerCreate(ctx context.Context, body LogflareWebApiSourceControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerRemoveBackend(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerRemoveBackendRequest(c.Server, sourceToken, backendToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerAddBackend(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerAddBackendRequest(c.Server, sourceToken, backendToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerRecent(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerRecentRequest(c.Server, sourceToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerShowSchema(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerShowSchemaRequest(c.Server, sourceToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerShowRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerUpdate2RequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerUpdate2(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerUpdate2Request(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerUpdateRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiSourceControllerUpdate(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiSourceControllerUpdateRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerCreate(ctx context.Context, body LogflareWebApiTeamControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerDelete(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerDeleteRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerShow(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerShowRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerUpdate2WithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerUpdate2RequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerUpdate2(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerUpdate2Request(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerUpdateWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerUpdateRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogflareWebApiTeamControllerUpdate(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogflareWebApiTeamControllerUpdateRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLogflareWebApiAccessTokenControllerIndexRequest generates requests for LogflareWebApiAccessTokenControllerIndex
func NewLogflareWebApiAccessTokenControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/access-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiAccessTokenControllerCreateRequest calls the generic LogflareWebApiAccessTokenControllerCreate builder with application/json body
func NewLogflareWebApiAccessTokenControllerCreateRequest(server string, body LogflareWebApiAccessTokenControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiAccessTokenControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiAccessTokenControllerCreateRequestWithBody generates requests for LogflareWebApiAccessTokenControllerCreate with any type of body
func NewLogflareWebApiAccessTokenControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/access-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiAccessTokenControllerDeleteRequest generates requests for LogflareWebApiAccessTokenControllerDelete
func NewLogflareWebApiAccessTokenControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/access-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiBackendControllerIndexRequest generates requests for LogflareWebApiBackendControllerIndex
func NewLogflareWebApiBackendControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiBackendControllerCreateRequest calls the generic LogflareWebApiBackendControllerCreate builder with application/json body
func NewLogflareWebApiBackendControllerCreateRequest(server string, body LogflareWebApiBackendControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiBackendControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiBackendControllerCreateRequestWithBody generates requests for LogflareWebApiBackendControllerCreate with any type of body
func NewLogflareWebApiBackendControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiBackendControllerDeleteRequest generates requests for LogflareWebApiBackendControllerDelete
func NewLogflareWebApiBackendControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiBackendControllerShowRequest generates requests for LogflareWebApiBackendControllerShow
func NewLogflareWebApiBackendControllerShowRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiBackendControllerUpdate2Request calls the generic LogflareWebApiBackendControllerUpdate2 builder with application/json body
func NewLogflareWebApiBackendControllerUpdate2Request(server string, token string, body LogflareWebApiBackendControllerUpdate2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiBackendControllerUpdate2RequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiBackendControllerUpdate2RequestWithBody generates requests for LogflareWebApiBackendControllerUpdate2 with any type of body
func NewLogflareWebApiBackendControllerUpdate2RequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiBackendControllerUpdateRequest calls the generic LogflareWebApiBackendControllerUpdate builder with application/json body
func NewLogflareWebApiBackendControllerUpdateRequest(server string, token string, body LogflareWebApiBackendControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiBackendControllerUpdateRequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiBackendControllerUpdateRequestWithBody generates requests for LogflareWebApiBackendControllerUpdate with any type of body
func NewLogflareWebApiBackendControllerUpdateRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/backends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiEndpointControllerIndexRequest generates requests for LogflareWebApiEndpointControllerIndex
func NewLogflareWebApiEndpointControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiEndpointControllerCreateRequest calls the generic LogflareWebApiEndpointControllerCreate builder with application/json body
func NewLogflareWebApiEndpointControllerCreateRequest(server string, body LogflareWebApiEndpointControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiEndpointControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiEndpointControllerCreateRequestWithBody generates requests for LogflareWebApiEndpointControllerCreate with any type of body
func NewLogflareWebApiEndpointControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebEndpointsControllerQueryRequest generates requests for LogflareWebEndpointsControllerQuery
func NewLogflareWebEndpointsControllerQueryRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/query/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebEndpointsControllerQuery2Request generates requests for LogflareWebEndpointsControllerQuery2
func NewLogflareWebEndpointsControllerQuery2Request(server string, tokenOrName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_or_name", runtime.ParamLocationPath, tokenOrName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebEndpointsControllerQuery3Request generates requests for LogflareWebEndpointsControllerQuery3
func NewLogflareWebEndpointsControllerQuery3Request(server string, tokenOrName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_or_name", runtime.ParamLocationPath, tokenOrName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiEndpointControllerDeleteRequest generates requests for LogflareWebApiEndpointControllerDelete
func NewLogflareWebApiEndpointControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiEndpointControllerShowRequest generates requests for LogflareWebApiEndpointControllerShow
func NewLogflareWebApiEndpointControllerShowRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiEndpointControllerUpdate2Request calls the generic LogflareWebApiEndpointControllerUpdate2 builder with application/json body
func NewLogflareWebApiEndpointControllerUpdate2Request(server string, token string, body LogflareWebApiEndpointControllerUpdate2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiEndpointControllerUpdate2RequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiEndpointControllerUpdate2RequestWithBody generates requests for LogflareWebApiEndpointControllerUpdate2 with any type of body
func NewLogflareWebApiEndpointControllerUpdate2RequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiEndpointControllerUpdateRequest calls the generic LogflareWebApiEndpointControllerUpdate builder with application/json body
func NewLogflareWebApiEndpointControllerUpdateRequest(server string, token string, body LogflareWebApiEndpointControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiEndpointControllerUpdateRequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiEndpointControllerUpdateRequestWithBody generates requests for LogflareWebApiEndpointControllerUpdate with any type of body
func NewLogflareWebApiEndpointControllerUpdateRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebLogControllerCreateRequest generates requests for LogflareWebLogControllerCreate
func NewLogflareWebLogControllerCreateRequest(server string, params *LogflareWebLogControllerCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebLogControllerCreate2Request generates requests for LogflareWebLogControllerCreate2
func NewLogflareWebLogControllerCreate2Request(server string, params *LogflareWebLogControllerCreate2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebLogControllerCreate3Request generates requests for LogflareWebLogControllerCreate3
func NewLogflareWebLogControllerCreate3Request(server string, params *LogflareWebLogControllerCreate3Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebLogControllerCreate4Request generates requests for LogflareWebLogControllerCreate4
func NewLogflareWebLogControllerCreate4Request(server string, params *LogflareWebLogControllerCreate4Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiQueryControllerQueryRequest generates requests for LogflareWebApiQueryControllerQuery
func NewLogflareWebApiQueryControllerQueryRequest(server string, params *LogflareWebApiQueryControllerQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sql", runtime.ParamLocationQuery, *params.Sql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BqSql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bq_sql", runtime.ParamLocationQuery, *params.BqSql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChSql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ch_sql", runtime.ParamLocationQuery, *params.ChSql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PgSql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pg_sql", runtime.ParamLocationQuery, *params.PgSql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiQueryControllerParseRequest generates requests for LogflareWebApiQueryControllerParse
func NewLogflareWebApiQueryControllerParseRequest(server string, params *LogflareWebApiQueryControllerParseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/query/parse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sql", runtime.ParamLocationQuery, *params.Sql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BqSql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bq_sql", runtime.ParamLocationQuery, *params.BqSql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChSql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ch_sql", runtime.ParamLocationQuery, *params.ChSql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiRuleControllerIndexRequest generates requests for LogflareWebApiRuleControllerIndex
func NewLogflareWebApiRuleControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiRuleControllerCreateRequest calls the generic LogflareWebApiRuleControllerCreate builder with application/json body
func NewLogflareWebApiRuleControllerCreateRequest(server string, body LogflareWebApiRuleControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiRuleControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiRuleControllerCreateRequestWithBody generates requests for LogflareWebApiRuleControllerCreate with any type of body
func NewLogflareWebApiRuleControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiRuleControllerDeleteRequest generates requests for LogflareWebApiRuleControllerDelete
func NewLogflareWebApiRuleControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiRuleControllerShowRequest generates requests for LogflareWebApiRuleControllerShow
func NewLogflareWebApiRuleControllerShowRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiRuleControllerUpdate2Request calls the generic LogflareWebApiRuleControllerUpdate2 builder with application/json body
func NewLogflareWebApiRuleControllerUpdate2Request(server string, token string, body LogflareWebApiRuleControllerUpdate2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiRuleControllerUpdate2RequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiRuleControllerUpdate2RequestWithBody generates requests for LogflareWebApiRuleControllerUpdate2 with any type of body
func NewLogflareWebApiRuleControllerUpdate2RequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiRuleControllerUpdateRequest calls the generic LogflareWebApiRuleControllerUpdate builder with application/json body
func NewLogflareWebApiRuleControllerUpdateRequest(server string, token string, body LogflareWebApiRuleControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiRuleControllerUpdateRequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiRuleControllerUpdateRequestWithBody generates requests for LogflareWebApiRuleControllerUpdate with any type of body
func NewLogflareWebApiRuleControllerUpdateRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiSourceControllerIndexRequest generates requests for LogflareWebApiSourceControllerIndex
func NewLogflareWebApiSourceControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerCreateRequest calls the generic LogflareWebApiSourceControllerCreate builder with application/json body
func NewLogflareWebApiSourceControllerCreateRequest(server string, body LogflareWebApiSourceControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiSourceControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiSourceControllerCreateRequestWithBody generates requests for LogflareWebApiSourceControllerCreate with any type of body
func NewLogflareWebApiSourceControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiSourceControllerRemoveBackendRequest generates requests for LogflareWebApiSourceControllerRemoveBackend
func NewLogflareWebApiSourceControllerRemoveBackendRequest(server string, sourceToken string, backendToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source_token", runtime.ParamLocationPath, sourceToken)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "backend_token", runtime.ParamLocationPath, backendToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s/backends/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerAddBackendRequest generates requests for LogflareWebApiSourceControllerAddBackend
func NewLogflareWebApiSourceControllerAddBackendRequest(server string, sourceToken string, backendToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source_token", runtime.ParamLocationPath, sourceToken)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "backend_token", runtime.ParamLocationPath, backendToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s/backends/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerRecentRequest generates requests for LogflareWebApiSourceControllerRecent
func NewLogflareWebApiSourceControllerRecentRequest(server string, sourceToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source_token", runtime.ParamLocationPath, sourceToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s/recent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerShowSchemaRequest generates requests for LogflareWebApiSourceControllerShowSchema
func NewLogflareWebApiSourceControllerShowSchemaRequest(server string, sourceToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source_token", runtime.ParamLocationPath, sourceToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerDeleteRequest generates requests for LogflareWebApiSourceControllerDelete
func NewLogflareWebApiSourceControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerShowRequest generates requests for LogflareWebApiSourceControllerShow
func NewLogflareWebApiSourceControllerShowRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiSourceControllerUpdate2Request calls the generic LogflareWebApiSourceControllerUpdate2 builder with application/json body
func NewLogflareWebApiSourceControllerUpdate2Request(server string, token string, body LogflareWebApiSourceControllerUpdate2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiSourceControllerUpdate2RequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiSourceControllerUpdate2RequestWithBody generates requests for LogflareWebApiSourceControllerUpdate2 with any type of body
func NewLogflareWebApiSourceControllerUpdate2RequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiSourceControllerUpdateRequest calls the generic LogflareWebApiSourceControllerUpdate builder with application/json body
func NewLogflareWebApiSourceControllerUpdateRequest(server string, token string, body LogflareWebApiSourceControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiSourceControllerUpdateRequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiSourceControllerUpdateRequestWithBody generates requests for LogflareWebApiSourceControllerUpdate with any type of body
func NewLogflareWebApiSourceControllerUpdateRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiTeamControllerIndexRequest generates requests for LogflareWebApiTeamControllerIndex
func NewLogflareWebApiTeamControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiTeamControllerCreateRequest calls the generic LogflareWebApiTeamControllerCreate builder with application/json body
func NewLogflareWebApiTeamControllerCreateRequest(server string, body LogflareWebApiTeamControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiTeamControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLogflareWebApiTeamControllerCreateRequestWithBody generates requests for LogflareWebApiTeamControllerCreate with any type of body
func NewLogflareWebApiTeamControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiTeamControllerDeleteRequest generates requests for LogflareWebApiTeamControllerDelete
func NewLogflareWebApiTeamControllerDeleteRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiTeamControllerShowRequest generates requests for LogflareWebApiTeamControllerShow
func NewLogflareWebApiTeamControllerShowRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogflareWebApiTeamControllerUpdate2Request calls the generic LogflareWebApiTeamControllerUpdate2 builder with application/json body
func NewLogflareWebApiTeamControllerUpdate2Request(server string, token string, body LogflareWebApiTeamControllerUpdate2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiTeamControllerUpdate2RequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiTeamControllerUpdate2RequestWithBody generates requests for LogflareWebApiTeamControllerUpdate2 with any type of body
func NewLogflareWebApiTeamControllerUpdate2RequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogflareWebApiTeamControllerUpdateRequest calls the generic LogflareWebApiTeamControllerUpdate builder with application/json body
func NewLogflareWebApiTeamControllerUpdateRequest(server string, token string, body LogflareWebApiTeamControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogflareWebApiTeamControllerUpdateRequestWithBody(server, token, "application/json", bodyReader)
}

// NewLogflareWebApiTeamControllerUpdateRequestWithBody generates requests for LogflareWebApiTeamControllerUpdate with any type of body
func NewLogflareWebApiTeamControllerUpdateRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LogflareWebApiAccessTokenControllerIndexWithResponse request
	LogflareWebApiAccessTokenControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerIndexResponse, error)

	// LogflareWebApiAccessTokenControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiAccessTokenControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerCreateResponse, error)

	LogflareWebApiAccessTokenControllerCreateWithResponse(ctx context.Context, body LogflareWebApiAccessTokenControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerCreateResponse, error)

	// LogflareWebApiAccessTokenControllerDeleteWithResponse request
	LogflareWebApiAccessTokenControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerDeleteResponse, error)

	// LogflareWebApiBackendControllerIndexWithResponse request
	LogflareWebApiBackendControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerIndexResponse, error)

	// LogflareWebApiBackendControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiBackendControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerCreateResponse, error)

	LogflareWebApiBackendControllerCreateWithResponse(ctx context.Context, body LogflareWebApiBackendControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerCreateResponse, error)

	// LogflareWebApiBackendControllerDeleteWithResponse request
	LogflareWebApiBackendControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerDeleteResponse, error)

	// LogflareWebApiBackendControllerShowWithResponse request
	LogflareWebApiBackendControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerShowResponse, error)

	// LogflareWebApiBackendControllerUpdate2WithBodyWithResponse request with any body
	LogflareWebApiBackendControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdate2Response, error)

	LogflareWebApiBackendControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdate2Response, error)

	// LogflareWebApiBackendControllerUpdateWithBodyWithResponse request with any body
	LogflareWebApiBackendControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdateResponse, error)

	LogflareWebApiBackendControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdateResponse, error)

	// LogflareWebApiEndpointControllerIndexWithResponse request
	LogflareWebApiEndpointControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerIndexResponse, error)

	// LogflareWebApiEndpointControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiEndpointControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerCreateResponse, error)

	LogflareWebApiEndpointControllerCreateWithResponse(ctx context.Context, body LogflareWebApiEndpointControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerCreateResponse, error)

	// LogflareWebEndpointsControllerQueryWithResponse request
	LogflareWebEndpointsControllerQueryWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQueryResponse, error)

	// LogflareWebEndpointsControllerQuery2WithResponse request
	LogflareWebEndpointsControllerQuery2WithResponse(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQuery2Response, error)

	// LogflareWebEndpointsControllerQuery3WithResponse request
	LogflareWebEndpointsControllerQuery3WithResponse(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQuery3Response, error)

	// LogflareWebApiEndpointControllerDeleteWithResponse request
	LogflareWebApiEndpointControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerDeleteResponse, error)

	// LogflareWebApiEndpointControllerShowWithResponse request
	LogflareWebApiEndpointControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerShowResponse, error)

	// LogflareWebApiEndpointControllerUpdate2WithBodyWithResponse request with any body
	LogflareWebApiEndpointControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdate2Response, error)

	LogflareWebApiEndpointControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdate2Response, error)

	// LogflareWebApiEndpointControllerUpdateWithBodyWithResponse request with any body
	LogflareWebApiEndpointControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdateResponse, error)

	LogflareWebApiEndpointControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdateResponse, error)

	// LogflareWebLogControllerCreateWithResponse request
	LogflareWebLogControllerCreateWithResponse(ctx context.Context, params *LogflareWebLogControllerCreateParams, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreateResponse, error)

	// LogflareWebLogControllerCreate2WithResponse request
	LogflareWebLogControllerCreate2WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate2Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate2Response, error)

	// LogflareWebLogControllerCreate3WithResponse request
	LogflareWebLogControllerCreate3WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate3Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate3Response, error)

	// LogflareWebLogControllerCreate4WithResponse request
	LogflareWebLogControllerCreate4WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate4Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate4Response, error)

	// LogflareWebApiQueryControllerQueryWithResponse request
	LogflareWebApiQueryControllerQueryWithResponse(ctx context.Context, params *LogflareWebApiQueryControllerQueryParams, reqEditors ...RequestEditorFn) (*LogflareWebApiQueryControllerQueryResponse, error)

	// LogflareWebApiQueryControllerParseWithResponse request
	LogflareWebApiQueryControllerParseWithResponse(ctx context.Context, params *LogflareWebApiQueryControllerParseParams, reqEditors ...RequestEditorFn) (*LogflareWebApiQueryControllerParseResponse, error)

	// LogflareWebApiRuleControllerIndexWithResponse request
	LogflareWebApiRuleControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerIndexResponse, error)

	// LogflareWebApiRuleControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiRuleControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerCreateResponse, error)

	LogflareWebApiRuleControllerCreateWithResponse(ctx context.Context, body LogflareWebApiRuleControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerCreateResponse, error)

	// LogflareWebApiRuleControllerDeleteWithResponse request
	LogflareWebApiRuleControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerDeleteResponse, error)

	// LogflareWebApiRuleControllerShowWithResponse request
	LogflareWebApiRuleControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerShowResponse, error)

	// LogflareWebApiRuleControllerUpdate2WithBodyWithResponse request with any body
	LogflareWebApiRuleControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdate2Response, error)

	LogflareWebApiRuleControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdate2Response, error)

	// LogflareWebApiRuleControllerUpdateWithBodyWithResponse request with any body
	LogflareWebApiRuleControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdateResponse, error)

	LogflareWebApiRuleControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdateResponse, error)

	// LogflareWebApiSourceControllerIndexWithResponse request
	LogflareWebApiSourceControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerIndexResponse, error)

	// LogflareWebApiSourceControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiSourceControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerCreateResponse, error)

	LogflareWebApiSourceControllerCreateWithResponse(ctx context.Context, body LogflareWebApiSourceControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerCreateResponse, error)

	// LogflareWebApiSourceControllerRemoveBackendWithResponse request
	LogflareWebApiSourceControllerRemoveBackendWithResponse(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerRemoveBackendResponse, error)

	// LogflareWebApiSourceControllerAddBackendWithResponse request
	LogflareWebApiSourceControllerAddBackendWithResponse(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerAddBackendResponse, error)

	// LogflareWebApiSourceControllerRecentWithResponse request
	LogflareWebApiSourceControllerRecentWithResponse(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerRecentResponse, error)

	// LogflareWebApiSourceControllerShowSchemaWithResponse request
	LogflareWebApiSourceControllerShowSchemaWithResponse(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerShowSchemaResponse, error)

	// LogflareWebApiSourceControllerDeleteWithResponse request
	LogflareWebApiSourceControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerDeleteResponse, error)

	// LogflareWebApiSourceControllerShowWithResponse request
	LogflareWebApiSourceControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerShowResponse, error)

	// LogflareWebApiSourceControllerUpdate2WithBodyWithResponse request with any body
	LogflareWebApiSourceControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdate2Response, error)

	LogflareWebApiSourceControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdate2Response, error)

	// LogflareWebApiSourceControllerUpdateWithBodyWithResponse request with any body
	LogflareWebApiSourceControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdateResponse, error)

	LogflareWebApiSourceControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdateResponse, error)

	// LogflareWebApiTeamControllerIndexWithResponse request
	LogflareWebApiTeamControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerIndexResponse, error)

	// LogflareWebApiTeamControllerCreateWithBodyWithResponse request with any body
	LogflareWebApiTeamControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerCreateResponse, error)

	LogflareWebApiTeamControllerCreateWithResponse(ctx context.Context, body LogflareWebApiTeamControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerCreateResponse, error)

	// LogflareWebApiTeamControllerDeleteWithResponse request
	LogflareWebApiTeamControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerDeleteResponse, error)

	// LogflareWebApiTeamControllerShowWithResponse request
	LogflareWebApiTeamControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerShowResponse, error)

	// LogflareWebApiTeamControllerUpdate2WithBodyWithResponse request with any body
	LogflareWebApiTeamControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdate2Response, error)

	LogflareWebApiTeamControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdate2Response, error)

	// LogflareWebApiTeamControllerUpdateWithBodyWithResponse request with any body
	LogflareWebApiTeamControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdateResponse, error)

	LogflareWebApiTeamControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdateResponse, error)
}

type LogflareWebApiAccessTokenControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccessToken
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiAccessTokenControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiAccessTokenControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiAccessTokenControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccessToken
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiAccessTokenControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiAccessTokenControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiAccessTokenControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiAccessTokenControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiAccessTokenControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BackendApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BackendApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerUpdate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerUpdate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerUpdate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiBackendControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackendApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiBackendControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiBackendControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EndpointApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointApiSchema
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebEndpointsControllerQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointQuery
}

// Status returns HTTPResponse.Status
func (r LogflareWebEndpointsControllerQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebEndpointsControllerQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebEndpointsControllerQuery2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointQuery
}

// Status returns HTTPResponse.Status
func (r LogflareWebEndpointsControllerQuery2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebEndpointsControllerQuery2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebEndpointsControllerQuery3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointQuery
}

// Status returns HTTPResponse.Status
func (r LogflareWebEndpointsControllerQuery3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebEndpointsControllerQuery3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerUpdate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointApiSchema
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerUpdate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerUpdate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiEndpointControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointApiSchema
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiEndpointControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiEndpointControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebLogControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogsCreated
}

// Status returns HTTPResponse.Status
func (r LogflareWebLogControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebLogControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebLogControllerCreate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogsCreated
}

// Status returns HTTPResponse.Status
func (r LogflareWebLogControllerCreate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebLogControllerCreate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebLogControllerCreate3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogsCreated
}

// Status returns HTTPResponse.Status
func (r LogflareWebLogControllerCreate3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebLogControllerCreate3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebLogControllerCreate4Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogsCreated
}

// Status returns HTTPResponse.Status
func (r LogflareWebLogControllerCreate4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebLogControllerCreate4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiQueryControllerQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]QueryResult
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiQueryControllerQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiQueryControllerQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiQueryControllerParseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryParseResult
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiQueryControllerParseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiQueryControllerParseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RuleApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RuleApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerUpdate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerUpdate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerUpdate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiRuleControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleApiSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiRuleControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiRuleControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Source
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Source
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerRemoveBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Source
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerRemoveBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerRemoveBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerAddBackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Source
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerAddBackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerAddBackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerRecentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerRecentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerRecentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerShowSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceSchema
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerShowSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerShowSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Source
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerUpdate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerUpdate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerUpdate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiSourceControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiSourceControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiSourceControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerUpdate2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerUpdate2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerUpdate2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogflareWebApiTeamControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	JSON422      *struct {
		Errors map[string]interface{} `json:"errors"`
	}
}

// Status returns HTTPResponse.Status
func (r LogflareWebApiTeamControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogflareWebApiTeamControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LogflareWebApiAccessTokenControllerIndexWithResponse request returning *LogflareWebApiAccessTokenControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiAccessTokenControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiAccessTokenControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiAccessTokenControllerIndexResponse(rsp)
}

// LogflareWebApiAccessTokenControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiAccessTokenControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiAccessTokenControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiAccessTokenControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiAccessTokenControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiAccessTokenControllerCreateWithResponse(ctx context.Context, body LogflareWebApiAccessTokenControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiAccessTokenControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiAccessTokenControllerCreateResponse(rsp)
}

// LogflareWebApiAccessTokenControllerDeleteWithResponse request returning *LogflareWebApiAccessTokenControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiAccessTokenControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiAccessTokenControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiAccessTokenControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiAccessTokenControllerDeleteResponse(rsp)
}

// LogflareWebApiBackendControllerIndexWithResponse request returning *LogflareWebApiBackendControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiBackendControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerIndexResponse(rsp)
}

// LogflareWebApiBackendControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiBackendControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiBackendControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiBackendControllerCreateWithResponse(ctx context.Context, body LogflareWebApiBackendControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerCreateResponse(rsp)
}

// LogflareWebApiBackendControllerDeleteWithResponse request returning *LogflareWebApiBackendControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiBackendControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerDeleteResponse(rsp)
}

// LogflareWebApiBackendControllerShowWithResponse request returning *LogflareWebApiBackendControllerShowResponse
func (c *ClientWithResponses) LogflareWebApiBackendControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerShowResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerShow(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerShowResponse(rsp)
}

// LogflareWebApiBackendControllerUpdate2WithBodyWithResponse request with arbitrary body returning *LogflareWebApiBackendControllerUpdate2Response
func (c *ClientWithResponses) LogflareWebApiBackendControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiBackendControllerUpdate2WithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerUpdate2Response(rsp)
}

func (c *ClientWithResponses) LogflareWebApiBackendControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiBackendControllerUpdate2(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerUpdate2Response(rsp)
}

// LogflareWebApiBackendControllerUpdateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiBackendControllerUpdateResponse
func (c *ClientWithResponses) LogflareWebApiBackendControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerUpdateWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiBackendControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiBackendControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiBackendControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiBackendControllerUpdate(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiBackendControllerUpdateResponse(rsp)
}

// LogflareWebApiEndpointControllerIndexWithResponse request returning *LogflareWebApiEndpointControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiEndpointControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerIndexResponse(rsp)
}

// LogflareWebApiEndpointControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiEndpointControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiEndpointControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiEndpointControllerCreateWithResponse(ctx context.Context, body LogflareWebApiEndpointControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerCreateResponse(rsp)
}

// LogflareWebEndpointsControllerQueryWithResponse request returning *LogflareWebEndpointsControllerQueryResponse
func (c *ClientWithResponses) LogflareWebEndpointsControllerQueryWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQueryResponse, error) {
	rsp, err := c.LogflareWebEndpointsControllerQuery(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebEndpointsControllerQueryResponse(rsp)
}

// LogflareWebEndpointsControllerQuery2WithResponse request returning *LogflareWebEndpointsControllerQuery2Response
func (c *ClientWithResponses) LogflareWebEndpointsControllerQuery2WithResponse(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQuery2Response, error) {
	rsp, err := c.LogflareWebEndpointsControllerQuery2(ctx, tokenOrName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebEndpointsControllerQuery2Response(rsp)
}

// LogflareWebEndpointsControllerQuery3WithResponse request returning *LogflareWebEndpointsControllerQuery3Response
func (c *ClientWithResponses) LogflareWebEndpointsControllerQuery3WithResponse(ctx context.Context, tokenOrName string, reqEditors ...RequestEditorFn) (*LogflareWebEndpointsControllerQuery3Response, error) {
	rsp, err := c.LogflareWebEndpointsControllerQuery3(ctx, tokenOrName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebEndpointsControllerQuery3Response(rsp)
}

// LogflareWebApiEndpointControllerDeleteWithResponse request returning *LogflareWebApiEndpointControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiEndpointControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerDeleteResponse(rsp)
}

// LogflareWebApiEndpointControllerShowWithResponse request returning *LogflareWebApiEndpointControllerShowResponse
func (c *ClientWithResponses) LogflareWebApiEndpointControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerShowResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerShow(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerShowResponse(rsp)
}

// LogflareWebApiEndpointControllerUpdate2WithBodyWithResponse request with arbitrary body returning *LogflareWebApiEndpointControllerUpdate2Response
func (c *ClientWithResponses) LogflareWebApiEndpointControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiEndpointControllerUpdate2WithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerUpdate2Response(rsp)
}

func (c *ClientWithResponses) LogflareWebApiEndpointControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiEndpointControllerUpdate2(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerUpdate2Response(rsp)
}

// LogflareWebApiEndpointControllerUpdateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiEndpointControllerUpdateResponse
func (c *ClientWithResponses) LogflareWebApiEndpointControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerUpdateWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiEndpointControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiEndpointControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiEndpointControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiEndpointControllerUpdate(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiEndpointControllerUpdateResponse(rsp)
}

// LogflareWebLogControllerCreateWithResponse request returning *LogflareWebLogControllerCreateResponse
func (c *ClientWithResponses) LogflareWebLogControllerCreateWithResponse(ctx context.Context, params *LogflareWebLogControllerCreateParams, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreateResponse, error) {
	rsp, err := c.LogflareWebLogControllerCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebLogControllerCreateResponse(rsp)
}

// LogflareWebLogControllerCreate2WithResponse request returning *LogflareWebLogControllerCreate2Response
func (c *ClientWithResponses) LogflareWebLogControllerCreate2WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate2Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate2Response, error) {
	rsp, err := c.LogflareWebLogControllerCreate2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebLogControllerCreate2Response(rsp)
}

// LogflareWebLogControllerCreate3WithResponse request returning *LogflareWebLogControllerCreate3Response
func (c *ClientWithResponses) LogflareWebLogControllerCreate3WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate3Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate3Response, error) {
	rsp, err := c.LogflareWebLogControllerCreate3(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebLogControllerCreate3Response(rsp)
}

// LogflareWebLogControllerCreate4WithResponse request returning *LogflareWebLogControllerCreate4Response
func (c *ClientWithResponses) LogflareWebLogControllerCreate4WithResponse(ctx context.Context, params *LogflareWebLogControllerCreate4Params, reqEditors ...RequestEditorFn) (*LogflareWebLogControllerCreate4Response, error) {
	rsp, err := c.LogflareWebLogControllerCreate4(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebLogControllerCreate4Response(rsp)
}

// LogflareWebApiQueryControllerQueryWithResponse request returning *LogflareWebApiQueryControllerQueryResponse
func (c *ClientWithResponses) LogflareWebApiQueryControllerQueryWithResponse(ctx context.Context, params *LogflareWebApiQueryControllerQueryParams, reqEditors ...RequestEditorFn) (*LogflareWebApiQueryControllerQueryResponse, error) {
	rsp, err := c.LogflareWebApiQueryControllerQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiQueryControllerQueryResponse(rsp)
}

// LogflareWebApiQueryControllerParseWithResponse request returning *LogflareWebApiQueryControllerParseResponse
func (c *ClientWithResponses) LogflareWebApiQueryControllerParseWithResponse(ctx context.Context, params *LogflareWebApiQueryControllerParseParams, reqEditors ...RequestEditorFn) (*LogflareWebApiQueryControllerParseResponse, error) {
	rsp, err := c.LogflareWebApiQueryControllerParse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiQueryControllerParseResponse(rsp)
}

// LogflareWebApiRuleControllerIndexWithResponse request returning *LogflareWebApiRuleControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiRuleControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerIndexResponse(rsp)
}

// LogflareWebApiRuleControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiRuleControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiRuleControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiRuleControllerCreateWithResponse(ctx context.Context, body LogflareWebApiRuleControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerCreateResponse(rsp)
}

// LogflareWebApiRuleControllerDeleteWithResponse request returning *LogflareWebApiRuleControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiRuleControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerDeleteResponse(rsp)
}

// LogflareWebApiRuleControllerShowWithResponse request returning *LogflareWebApiRuleControllerShowResponse
func (c *ClientWithResponses) LogflareWebApiRuleControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerShowResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerShow(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerShowResponse(rsp)
}

// LogflareWebApiRuleControllerUpdate2WithBodyWithResponse request with arbitrary body returning *LogflareWebApiRuleControllerUpdate2Response
func (c *ClientWithResponses) LogflareWebApiRuleControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiRuleControllerUpdate2WithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerUpdate2Response(rsp)
}

func (c *ClientWithResponses) LogflareWebApiRuleControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiRuleControllerUpdate2(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerUpdate2Response(rsp)
}

// LogflareWebApiRuleControllerUpdateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiRuleControllerUpdateResponse
func (c *ClientWithResponses) LogflareWebApiRuleControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerUpdateWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiRuleControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiRuleControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiRuleControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiRuleControllerUpdate(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiRuleControllerUpdateResponse(rsp)
}

// LogflareWebApiSourceControllerIndexWithResponse request returning *LogflareWebApiSourceControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerIndexResponse(rsp)
}

// LogflareWebApiSourceControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiSourceControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiSourceControllerCreateWithResponse(ctx context.Context, body LogflareWebApiSourceControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerCreateResponse(rsp)
}

// LogflareWebApiSourceControllerRemoveBackendWithResponse request returning *LogflareWebApiSourceControllerRemoveBackendResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerRemoveBackendWithResponse(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerRemoveBackendResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerRemoveBackend(ctx, sourceToken, backendToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerRemoveBackendResponse(rsp)
}

// LogflareWebApiSourceControllerAddBackendWithResponse request returning *LogflareWebApiSourceControllerAddBackendResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerAddBackendWithResponse(ctx context.Context, sourceToken string, backendToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerAddBackendResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerAddBackend(ctx, sourceToken, backendToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerAddBackendResponse(rsp)
}

// LogflareWebApiSourceControllerRecentWithResponse request returning *LogflareWebApiSourceControllerRecentResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerRecentWithResponse(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerRecentResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerRecent(ctx, sourceToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerRecentResponse(rsp)
}

// LogflareWebApiSourceControllerShowSchemaWithResponse request returning *LogflareWebApiSourceControllerShowSchemaResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerShowSchemaWithResponse(ctx context.Context, sourceToken string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerShowSchemaResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerShowSchema(ctx, sourceToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerShowSchemaResponse(rsp)
}

// LogflareWebApiSourceControllerDeleteWithResponse request returning *LogflareWebApiSourceControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerDeleteResponse(rsp)
}

// LogflareWebApiSourceControllerShowWithResponse request returning *LogflareWebApiSourceControllerShowResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerShowResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerShow(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerShowResponse(rsp)
}

// LogflareWebApiSourceControllerUpdate2WithBodyWithResponse request with arbitrary body returning *LogflareWebApiSourceControllerUpdate2Response
func (c *ClientWithResponses) LogflareWebApiSourceControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiSourceControllerUpdate2WithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerUpdate2Response(rsp)
}

func (c *ClientWithResponses) LogflareWebApiSourceControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiSourceControllerUpdate2(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerUpdate2Response(rsp)
}

// LogflareWebApiSourceControllerUpdateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiSourceControllerUpdateResponse
func (c *ClientWithResponses) LogflareWebApiSourceControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerUpdateWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiSourceControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiSourceControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiSourceControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiSourceControllerUpdate(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiSourceControllerUpdateResponse(rsp)
}

// LogflareWebApiTeamControllerIndexWithResponse request returning *LogflareWebApiTeamControllerIndexResponse
func (c *ClientWithResponses) LogflareWebApiTeamControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerIndexResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerIndexResponse(rsp)
}

// LogflareWebApiTeamControllerCreateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiTeamControllerCreateResponse
func (c *ClientWithResponses) LogflareWebApiTeamControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiTeamControllerCreateWithResponse(ctx context.Context, body LogflareWebApiTeamControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerCreateResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerCreateResponse(rsp)
}

// LogflareWebApiTeamControllerDeleteWithResponse request returning *LogflareWebApiTeamControllerDeleteResponse
func (c *ClientWithResponses) LogflareWebApiTeamControllerDeleteWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerDeleteResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerDelete(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerDeleteResponse(rsp)
}

// LogflareWebApiTeamControllerShowWithResponse request returning *LogflareWebApiTeamControllerShowResponse
func (c *ClientWithResponses) LogflareWebApiTeamControllerShowWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerShowResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerShow(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerShowResponse(rsp)
}

// LogflareWebApiTeamControllerUpdate2WithBodyWithResponse request with arbitrary body returning *LogflareWebApiTeamControllerUpdate2Response
func (c *ClientWithResponses) LogflareWebApiTeamControllerUpdate2WithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiTeamControllerUpdate2WithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerUpdate2Response(rsp)
}

func (c *ClientWithResponses) LogflareWebApiTeamControllerUpdate2WithResponse(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdate2JSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdate2Response, error) {
	rsp, err := c.LogflareWebApiTeamControllerUpdate2(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerUpdate2Response(rsp)
}

// LogflareWebApiTeamControllerUpdateWithBodyWithResponse request with arbitrary body returning *LogflareWebApiTeamControllerUpdateResponse
func (c *ClientWithResponses) LogflareWebApiTeamControllerUpdateWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerUpdateWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) LogflareWebApiTeamControllerUpdateWithResponse(ctx context.Context, token string, body LogflareWebApiTeamControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LogflareWebApiTeamControllerUpdateResponse, error) {
	rsp, err := c.LogflareWebApiTeamControllerUpdate(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogflareWebApiTeamControllerUpdateResponse(rsp)
}

// ParseLogflareWebApiAccessTokenControllerIndexResponse parses an HTTP response from a LogflareWebApiAccessTokenControllerIndexWithResponse call
func ParseLogflareWebApiAccessTokenControllerIndexResponse(rsp *http.Response) (*LogflareWebApiAccessTokenControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiAccessTokenControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiAccessTokenControllerCreateResponse parses an HTTP response from a LogflareWebApiAccessTokenControllerCreateWithResponse call
func ParseLogflareWebApiAccessTokenControllerCreateResponse(rsp *http.Response) (*LogflareWebApiAccessTokenControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiAccessTokenControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiAccessTokenControllerDeleteResponse parses an HTTP response from a LogflareWebApiAccessTokenControllerDeleteWithResponse call
func ParseLogflareWebApiAccessTokenControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiAccessTokenControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiAccessTokenControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerIndexResponse parses an HTTP response from a LogflareWebApiBackendControllerIndexWithResponse call
func ParseLogflareWebApiBackendControllerIndexResponse(rsp *http.Response) (*LogflareWebApiBackendControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BackendApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerCreateResponse parses an HTTP response from a LogflareWebApiBackendControllerCreateWithResponse call
func ParseLogflareWebApiBackendControllerCreateResponse(rsp *http.Response) (*LogflareWebApiBackendControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BackendApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerDeleteResponse parses an HTTP response from a LogflareWebApiBackendControllerDeleteWithResponse call
func ParseLogflareWebApiBackendControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiBackendControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerShowResponse parses an HTTP response from a LogflareWebApiBackendControllerShowWithResponse call
func ParseLogflareWebApiBackendControllerShowResponse(rsp *http.Response) (*LogflareWebApiBackendControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerUpdate2Response parses an HTTP response from a LogflareWebApiBackendControllerUpdate2WithResponse call
func ParseLogflareWebApiBackendControllerUpdate2Response(rsp *http.Response) (*LogflareWebApiBackendControllerUpdate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerUpdate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiBackendControllerUpdateResponse parses an HTTP response from a LogflareWebApiBackendControllerUpdateWithResponse call
func ParseLogflareWebApiBackendControllerUpdateResponse(rsp *http.Response) (*LogflareWebApiBackendControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiBackendControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackendApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerIndexResponse parses an HTTP response from a LogflareWebApiEndpointControllerIndexWithResponse call
func ParseLogflareWebApiEndpointControllerIndexResponse(rsp *http.Response) (*LogflareWebApiEndpointControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EndpointApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerCreateResponse parses an HTTP response from a LogflareWebApiEndpointControllerCreateWithResponse call
func ParseLogflareWebApiEndpointControllerCreateResponse(rsp *http.Response) (*LogflareWebApiEndpointControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLogflareWebEndpointsControllerQueryResponse parses an HTTP response from a LogflareWebEndpointsControllerQueryWithResponse call
func ParseLogflareWebEndpointsControllerQueryResponse(rsp *http.Response) (*LogflareWebEndpointsControllerQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebEndpointsControllerQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebEndpointsControllerQuery2Response parses an HTTP response from a LogflareWebEndpointsControllerQuery2WithResponse call
func ParseLogflareWebEndpointsControllerQuery2Response(rsp *http.Response) (*LogflareWebEndpointsControllerQuery2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebEndpointsControllerQuery2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebEndpointsControllerQuery3Response parses an HTTP response from a LogflareWebEndpointsControllerQuery3WithResponse call
func ParseLogflareWebEndpointsControllerQuery3Response(rsp *http.Response) (*LogflareWebEndpointsControllerQuery3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebEndpointsControllerQuery3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointQuery
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerDeleteResponse parses an HTTP response from a LogflareWebApiEndpointControllerDeleteWithResponse call
func ParseLogflareWebApiEndpointControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiEndpointControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerShowResponse parses an HTTP response from a LogflareWebApiEndpointControllerShowWithResponse call
func ParseLogflareWebApiEndpointControllerShowResponse(rsp *http.Response) (*LogflareWebApiEndpointControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerUpdate2Response parses an HTTP response from a LogflareWebApiEndpointControllerUpdate2WithResponse call
func ParseLogflareWebApiEndpointControllerUpdate2Response(rsp *http.Response) (*LogflareWebApiEndpointControllerUpdate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerUpdate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiEndpointControllerUpdateResponse parses an HTTP response from a LogflareWebApiEndpointControllerUpdateWithResponse call
func ParseLogflareWebApiEndpointControllerUpdateResponse(rsp *http.Response) (*LogflareWebApiEndpointControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiEndpointControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLogflareWebLogControllerCreateResponse parses an HTTP response from a LogflareWebLogControllerCreateWithResponse call
func ParseLogflareWebLogControllerCreateResponse(rsp *http.Response) (*LogflareWebLogControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebLogControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogsCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebLogControllerCreate2Response parses an HTTP response from a LogflareWebLogControllerCreate2WithResponse call
func ParseLogflareWebLogControllerCreate2Response(rsp *http.Response) (*LogflareWebLogControllerCreate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebLogControllerCreate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogsCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebLogControllerCreate3Response parses an HTTP response from a LogflareWebLogControllerCreate3WithResponse call
func ParseLogflareWebLogControllerCreate3Response(rsp *http.Response) (*LogflareWebLogControllerCreate3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebLogControllerCreate3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogsCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebLogControllerCreate4Response parses an HTTP response from a LogflareWebLogControllerCreate4WithResponse call
func ParseLogflareWebLogControllerCreate4Response(rsp *http.Response) (*LogflareWebLogControllerCreate4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebLogControllerCreate4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogsCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiQueryControllerQueryResponse parses an HTTP response from a LogflareWebApiQueryControllerQueryWithResponse call
func ParseLogflareWebApiQueryControllerQueryResponse(rsp *http.Response) (*LogflareWebApiQueryControllerQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiQueryControllerQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []QueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiQueryControllerParseResponse parses an HTTP response from a LogflareWebApiQueryControllerParseWithResponse call
func ParseLogflareWebApiQueryControllerParseResponse(rsp *http.Response) (*LogflareWebApiQueryControllerParseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiQueryControllerParseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryParseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerIndexResponse parses an HTTP response from a LogflareWebApiRuleControllerIndexWithResponse call
func ParseLogflareWebApiRuleControllerIndexResponse(rsp *http.Response) (*LogflareWebApiRuleControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerCreateResponse parses an HTTP response from a LogflareWebApiRuleControllerCreateWithResponse call
func ParseLogflareWebApiRuleControllerCreateResponse(rsp *http.Response) (*LogflareWebApiRuleControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RuleApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerDeleteResponse parses an HTTP response from a LogflareWebApiRuleControllerDeleteWithResponse call
func ParseLogflareWebApiRuleControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiRuleControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerShowResponse parses an HTTP response from a LogflareWebApiRuleControllerShowWithResponse call
func ParseLogflareWebApiRuleControllerShowResponse(rsp *http.Response) (*LogflareWebApiRuleControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerUpdate2Response parses an HTTP response from a LogflareWebApiRuleControllerUpdate2WithResponse call
func ParseLogflareWebApiRuleControllerUpdate2Response(rsp *http.Response) (*LogflareWebApiRuleControllerUpdate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerUpdate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiRuleControllerUpdateResponse parses an HTTP response from a LogflareWebApiRuleControllerUpdateWithResponse call
func ParseLogflareWebApiRuleControllerUpdateResponse(rsp *http.Response) (*LogflareWebApiRuleControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiRuleControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleApiSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerIndexResponse parses an HTTP response from a LogflareWebApiSourceControllerIndexWithResponse call
func ParseLogflareWebApiSourceControllerIndexResponse(rsp *http.Response) (*LogflareWebApiSourceControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerCreateResponse parses an HTTP response from a LogflareWebApiSourceControllerCreateWithResponse call
func ParseLogflareWebApiSourceControllerCreateResponse(rsp *http.Response) (*LogflareWebApiSourceControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerRemoveBackendResponse parses an HTTP response from a LogflareWebApiSourceControllerRemoveBackendWithResponse call
func ParseLogflareWebApiSourceControllerRemoveBackendResponse(rsp *http.Response) (*LogflareWebApiSourceControllerRemoveBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerRemoveBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerAddBackendResponse parses an HTTP response from a LogflareWebApiSourceControllerAddBackendWithResponse call
func ParseLogflareWebApiSourceControllerAddBackendResponse(rsp *http.Response) (*LogflareWebApiSourceControllerAddBackendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerAddBackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerRecentResponse parses an HTTP response from a LogflareWebApiSourceControllerRecentWithResponse call
func ParseLogflareWebApiSourceControllerRecentResponse(rsp *http.Response) (*LogflareWebApiSourceControllerRecentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerRecentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerShowSchemaResponse parses an HTTP response from a LogflareWebApiSourceControllerShowSchemaWithResponse call
func ParseLogflareWebApiSourceControllerShowSchemaResponse(rsp *http.Response) (*LogflareWebApiSourceControllerShowSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerShowSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerDeleteResponse parses an HTTP response from a LogflareWebApiSourceControllerDeleteWithResponse call
func ParseLogflareWebApiSourceControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiSourceControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerShowResponse parses an HTTP response from a LogflareWebApiSourceControllerShowWithResponse call
func ParseLogflareWebApiSourceControllerShowResponse(rsp *http.Response) (*LogflareWebApiSourceControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerUpdate2Response parses an HTTP response from a LogflareWebApiSourceControllerUpdate2WithResponse call
func ParseLogflareWebApiSourceControllerUpdate2Response(rsp *http.Response) (*LogflareWebApiSourceControllerUpdate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerUpdate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiSourceControllerUpdateResponse parses an HTTP response from a LogflareWebApiSourceControllerUpdateWithResponse call
func ParseLogflareWebApiSourceControllerUpdateResponse(rsp *http.Response) (*LogflareWebApiSourceControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiSourceControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerIndexResponse parses an HTTP response from a LogflareWebApiTeamControllerIndexWithResponse call
func ParseLogflareWebApiTeamControllerIndexResponse(rsp *http.Response) (*LogflareWebApiTeamControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerCreateResponse parses an HTTP response from a LogflareWebApiTeamControllerCreateWithResponse call
func ParseLogflareWebApiTeamControllerCreateResponse(rsp *http.Response) (*LogflareWebApiTeamControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerDeleteResponse parses an HTTP response from a LogflareWebApiTeamControllerDeleteWithResponse call
func ParseLogflareWebApiTeamControllerDeleteResponse(rsp *http.Response) (*LogflareWebApiTeamControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerShowResponse parses an HTTP response from a LogflareWebApiTeamControllerShowWithResponse call
func ParseLogflareWebApiTeamControllerShowResponse(rsp *http.Response) (*LogflareWebApiTeamControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerUpdate2Response parses an HTTP response from a LogflareWebApiTeamControllerUpdate2WithResponse call
func ParseLogflareWebApiTeamControllerUpdate2Response(rsp *http.Response) (*LogflareWebApiTeamControllerUpdate2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerUpdate2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLogflareWebApiTeamControllerUpdateResponse parses an HTTP response from a LogflareWebApiTeamControllerUpdateWithResponse call
func ParseLogflareWebApiTeamControllerUpdateResponse(rsp *http.Response) (*LogflareWebApiTeamControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogflareWebApiTeamControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Errors map[string]interface{} `json:"errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
